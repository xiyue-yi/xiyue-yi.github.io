<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo部署踩坑教程 &amp; Hexo如何仅通过修改_posts更新网页</title>
    <link href="/2023/03/11/Hexo%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
    <url>/2023/03/11/Hexo%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>最近接触Hexo搭建Github Pages的内容，在部署的过程中遇到了一些坑点，记录并分享出来。</p><div class="note note-success">            <p><strong>【划重点】主要坑点：拷贝theme仓库之后产生的子模块冲突问题、源代码和静态文件存储不同分支的冲突问题。</strong> </p>          </div><span id="more"></span><h3 id="远程仓库创建"><a href="#远程仓库创建" class="headerlink" title="远程仓库创建"></a>远程仓库创建</h3><p>在GitHub上新建名为 <strong><em>username</em>.github.io</strong> 的Repo，<code>username</code> 是你在 GitHub 上的用户名。</p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>Hexo的安装需要基于Node.js和Git程序，具体的安装过程见Hexo官网的详细说明：</p><p><a href="https://hexo.io/zh-cn/docs/">安装|Hexo</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g hexo-cli</span><br></code></pre></td></tr></table></figure><h3 id="本地仓库初始化"><a href="#本地仓库初始化" class="headerlink" title="本地仓库初始化"></a>本地仓库初始化</h3><ol><li>参考<a href="https://hexo.io/zh-cn/docs/setup">Hexo官网教程</a>，新建文件夹<folder>作为项目仓库：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init &lt;folder&gt;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> &lt;folder&gt;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install</span><br></code></pre></td></tr></table></figure><p>执行<code>npm install</code>指令是默认安装所有<code>package.json</code>文件中列出的依赖包。</p><p>新建完成后，指定文件夹的目录如下</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>| ├── <span class="hljs-variable">_drafts</span><br>| └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><ul><li><code>_config.yml</code>中对网站信息进行配置</li><li><code>package.json</code>定义静态文件生成需要的基础依赖包</li><li><code>source/_posts/</code>路径下存放所有Markdown格式的blog文件</li><li><code>themes/</code>中存放使用的Hexo主题</li></ul><ol start="2"><li>然后，将指定文件夹初始化为Git Repo：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git init</span><br>Initialized empty Git repository in .git/<br></code></pre></td></tr></table></figure><ol start="3"><li>建立一个本地仓库的新分支，方便后面的代码同步，命名为<strong>hexo</strong>，<strong>注意这个项目的远程仓库将会包含两个分支，「hexo」这个分支的建立是为了存储项目源代码，后面生成的静态网页文件会存储到另一个分支「gh-pages」中</strong>。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b hexo</span><br></code></pre></td></tr></table></figure><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>使用现成的Hexo主题，需要将对应的项目拷贝到文件夹<code>themes/</code>中，这里很重要的一点是，<strong>尽量不要采用直接的git clone方式</strong>，因为这样相当于「博客源码的Git Repo包含了另一个主题源码的Git Repo」，涉及到子模块(Submodule)的问题，后续会出现一些commit冲突（这些冲突并非无法解决，也有相应的解决方式，具体可以google，只是相比之下会麻烦很多）。更优的方式是直接使用Git Submodules来引用主题的Repo，这里以一个Hexo主题<a href="https://frame.zhangyongqi.com/about-cn/">Frame</a>为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git submodule add https://github.com/zoeingwingkei/frame.git themes/frame</span><br></code></pre></td></tr></table></figure><p>这样，就在<code>themes/frame</code>中添加了Frame主题，现在查看<code>.gitmodules</code>文件，可以看见主题Repo现在已经作为一个submodule添加到了项目中：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[submodule <span class="hljs-string">&quot;themes/frame&quot;</span>]<br>path = themes/frame<br>url = https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/zoeingwingkei/</span>frame.git<br></code></pre></td></tr></table></figure><p>接下来，还需要在<code>_config.yml</code>文件中进行主题配置，修改其中的<code>theme</code>字段，将项目主题换成<code>Frame</code>：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> frame<br></code></pre></td></tr></table></figure><p>这样主题配置就完成了，此时执行<code>hexo generate</code>，会发现Hexo能够在<code>public/</code>目录下生成相应的静态网页。执行<code>hexo server</code>，能够在本地对生成的网页进行预览。<code>Frame</code>主题的更多网页格式配置方式可以参考<a href="https://frame.zhangyongqi.com/about-cn/">Frame主页</a>，这里仅对部署过程进行记录。</p><p>配置完主题之后，可以先提交一次代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add .</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -m <span class="hljs-string">&quot;Add Frame theme by submodule&quot;</span></span><br></code></pre></td></tr></table></figure><h3 id="网站部署"><a href="#网站部署" class="headerlink" title="网站部署"></a>网站部署</h3><p>至此已经实现了包含主题的静态网页在本地的生成，接下来的操作是把静态网页部署到Git Repo中，这里有两种方式，一种是<strong>「一键部署」</strong>，也是大部分人会采用的常见方式，操作步骤简单，但是每次都需要先生成静态页面再部署到GitHub上；另一种是通过<strong>「Git Actions」</strong>的操作部署到GitHub Pages，这种方式既可以将源码传入远程仓库进行备份和维护，更新博客时也只需要将新建的blog文件push到Git Repo中，类似使用<code>Jekyll</code>的方式。</p><h4 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h4><p>一键部署的方法可以参考<a href="https://hexo.io/zh-cn/docs/one-command-deployment">官网说明</a>：</p><ol><li>安装<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install hexo-deployer-git --save</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在<code>_config.yml</code>中添加以下配置：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="hljs-comment"># example, https://github.com/hexojs/hexojs.github.io</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></td></tr></table></figure><p>其中，<code>repo</code>是所要上传的GitHub Repo名，即 <strong><em>username</em>.github.io</strong>，<code>branch</code>是远程Repo中的对应分支，这里命名为<code>gh-pages</code>；即部署生成的静态文件到远程仓库的<strong>gh-pages</strong>分支。</p><ol start="3"><li>执行<code>hexo clean &amp;&amp; hexo deply</code>，进行项目部署。作业部署完成后，产生的页面会放在<strong>gh-pages</strong>分支。</li><li>在Repo中前往 <strong>Settings</strong> &gt; <strong>Pages</strong> &gt; <strong>Source</strong>，并将branch改为<code>gh-pages</code>。</li><li>等待上传完成，浏览<code>&lt;GitHub 用户名&gt;.github.io</code>检查网站是否正常运作。</li></ol><h4 id="Git-Actions部署"><a href="#Git-Actions部署" class="headerlink" title="Git Actions部署"></a>Git Actions部署</h4><p>Git Actions通过定义一系列<a href="https://docs.github.com/en/actions/using-workflows">Workflow触发器</a>执行操作，详细介绍参见<a href="https://docs.github.com/en/actions">GitHub Actions 官方指南</a>。</p><details><summary><b>Workflow配置举例</b></summary><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Greet</span> <span class="hljs-string">Everyone</span><br><span class="hljs-comment"># This workflow is triggered on pushes to the repository.</span><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]<br><span class="hljs-attr">jobs:</span><br><span class="hljs-attr">build:</span><br><span class="hljs-comment"># Job name is Greeting</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Greeting</span><br><span class="hljs-comment"># This job runs on Linux</span><br><span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><span class="hljs-attr">steps:</span><br><span class="hljs-comment"># This step uses GitHub&#x27;s hello-world-javascript-action: https://github.com/actions/hello-world-javascript-action</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">world</span><br><span class="hljs-attr">uses:</span> <span class="hljs-string">actions/hello-world-javascript-action@v1</span><br><span class="hljs-attr">with:</span><br><span class="hljs-attr">who-to-greet:</span> <span class="hljs-string">&#x27;Mona the Octocat&#x27;</span><br><span class="hljs-attr">id:</span> <span class="hljs-string">hello</span><br><span class="hljs-comment"># This step prints an output (time) from the previous step&#x27;s action.</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Echo</span> <span class="hljs-string">the</span> <span class="hljs-string">greeting&#x27;s</span> <span class="hljs-string">time</span><br><span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;The time was $<span class="hljs-template-variable">&#123;&#123; steps.hello.outputs.time &#125;&#125;</span>.&#x27;</span><br></code></pre></td></tr></table></figure></details><p>以上面这个Workflow配置为例，<code>name</code>字段定义<code>Action</code>的名称，会显示在Repo的Actions界面；<code>on</code>字段定义触发条件，包括Pull Request &#x2F; Push &#x2F; 手动触发等；<code>jobs</code>定义Workflow的具体执行操作，包括<code>build / steps</code>字段。</p><p><code>build</code>中<code>name</code>定义<code>jobs</code>的名称；<code>step</code>是一个数组，执行<code>build</code>的过程中，会按先后顺序触发<code>step</code>中的任务，每一项任务的定义可以采用<code>uses</code>方式定义，调用GitHub预置或第三方提供的函数来进行环境配置、下载源码等操作；也可以使用<code>run</code>定义的Shell脚本。</p><p>Hexo官网中提供了使用Git Actions进行部署的<a href="https://hexo.io/zh-cn/docs/github-pages">教程</a>，其中提供了Workflow的构建代码，修改了其中一部分内容总结如下：</p><ol><li>使用<code>node --version</code>指令检查本地的Node.js版本并记录。</li><li>在本地仓库中建立<code>.github/workflows/pages.yml</code>，并填入以下内容，相比官网教程有所修改，相关说明见代码中的注释部分：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># .github/workflows/pages.yml</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Pages</span><br><br><span class="hljs-attr">on:</span><br><span class="hljs-attr">push:</span><br><span class="hljs-attr">branches:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span> <span class="hljs-comment"># default branch 修改为使用的分支名</span><br><br><span class="hljs-attr">jobs:</span><br><span class="hljs-attr">pages:</span><br><span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><span class="hljs-attr">permissions:</span><br><span class="hljs-attr">contents:</span> <span class="hljs-string">write</span><br><span class="hljs-attr">steps:</span><br><span class="hljs-comment"># 将源码clone到运行环境中</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><span class="hljs-attr">with:</span><br><span class="hljs-attr">submodules:</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-comment"># 这里因为使用了子模块，设置为true</span><br><span class="hljs-comment"># 配置Node.js环境</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">16.</span><span class="hljs-string">x</span><br><span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span><br><span class="hljs-attr">with:</span><br><span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;16&quot;</span> <span class="hljs-comment"># 这里需要修改为对应的Node.js版本</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">NPM</span> <span class="hljs-string">dependencies</span><br><span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v2</span><br><span class="hljs-attr">with:</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br><span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.OS</span> <span class="hljs-string">&#125;&#125;-npm-cache</span><br><span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.OS</span> <span class="hljs-string">&#125;&#125;-npm-cache</span><br><span class="hljs-comment"># 安装依赖环境</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br><span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br><span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br><span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br><span class="hljs-attr">with:</span><br><span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br><span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span><br></code></pre></td></tr></table></figure><ol start="3"><li>修改完成workflow文件之后，提交一下代码：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add .</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -m <span class="hljs-string">&quot;Add Workflow File&quot;</span></span><br></code></pre></td></tr></table></figure><ol start="4"><li>使用之前创建的 <strong><em>username</em>.github.io</strong> 远程仓库，<code>username</code> 是 GitHub 上的用户名。将本地仓库与远程仓库建立连接：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote add origin https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</span><br></code></pre></td></tr></table></figure><ol start="5"><li>将Hexo文件夹中的文件push到远程Repo的对应分支，之前建立了本地的<strong>hexo</strong>分支，这里对应的远程分支也为<strong>hexo</strong>。</li></ol><ul><li>将本地<strong>hexo</strong>分支push到Github的远程<strong>hexo</strong>分支：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin hexo</span><br></code></pre></td></tr></table></figure><ul><li>默认情况下<code>public/</code>不会被上传（也不该被上传），确保<code>.gitignore</code>文件中包含一行<code>public/</code>，整体文件夹结构应该与<a href="https://github.com/hexojs/hexo-starter">范例仓库</a>大致相似。</li></ul><ol start="6"><li><p>作业部署完成后，产生的页面会放在仓库的<code>gh-pages</code>分支。</p></li><li><p>在Repo中前往 <strong>Settings</strong> &gt; <strong>Pages</strong> &gt; <strong>Source</strong>，并将branch改为<code>gh-pages</code>。（注意这里，如果选错分支会导致无法build GH Pages）</p></li><li><p>前往<em>username</em>.github.io查看网站。</p></li></ol><p>后续如果需要添加新的博文，通过<code>hexo new &lt;blogname&gt;</code>创建文件并编辑内容、提交变更后，直接push到远程仓库即能够自动生成静态文件，完成部署，自动实现变更效果。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://hexo.io/zh-cn/docs/">Hexo官方教程</a></p><p><a href="https://oreo.life/blog/2021-09-01-deploy-hexo-with-github-actions-1/">轮子再造 | 使用 GitHub Actions 自动部署 Hexo 博客 - 上篇</a></p><p><a href="https://developer.aliyun.com/article/789233">【Hexo博客搭建】将其部署到GitHub Pages（二）：如何初始化并部署？</a></p><p><a href="https://liguanghe.github.io/2017/11/06/blogRebuilt/">hexo 博客的神坑及本质原因</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub-pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac OS：C++ IDE &amp; OpenCV2安装配置</title>
    <link href="/2019/05/13/2019-05-13-Mac%20OS%EF%BC%9AC++%20IDE%20&amp;%20OpenCV2%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/05/13/2019-05-13-Mac%20OS%EF%BC%9AC++%20IDE%20&amp;%20OpenCV2%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>因为最近有一个作业需要跑c++程序，但是最近都用python比较多， mac上还没有配置过c++的环境，所以需要先配置一下IDE之类的。</p><span id="more"></span><h2 id="1-安装IDE——CLion"><a href="#1-安装IDE——CLion" class="headerlink" title="1. 安装IDE——CLion"></a>1. 安装IDE——CLion</h2><p>win系统下支持C++的IDE还是挺丰富的，甚至有挺多轻量级的选择，但是对mac上的不是很了解，简单挑选了一些最后选定了CLion作为跑实验的IDE，实际使用体验也还不错，可能因为也是JetBrains的软件，很多使用习惯和PyCharm还挺像的，所以上手也比较容易。学生还可以用学生邮箱注册免费账号。</p><h2 id="2-安装Cmake"><a href="#2-安装Cmake" class="headerlink" title="2. 安装Cmake"></a>2. 安装Cmake</h2><h2 id="3-安装OpenCV2"><a href="#3-安装OpenCV2" class="headerlink" title="3. 安装OpenCV2"></a>3. 安装OpenCV2</h2><p>在mac上安装OpenCV其实还是很简单的，借助homebrew工具只要一行命令即可；但是由于需要的依赖库比较多，所以安装时间会比较长。</p><p>在安装的时候尤其需要注意OpenCV的<strong>版本问题</strong>，用homebrew搜索功能可以看到目前提供了三个版本供下载：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">brew <span class="hljs-keyword">search</span> opencv<br><br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span>Formulae<span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><br>opencv                  opencv<span class="hljs-variable">@2</span>                   opencv<span class="hljs-variable">@3</span><br></code></pre></td></tr></table></figure><p>当前时间下，如果直接安装opencv默认为OpenCV3版本，也是当前的主流版本，后面两个分别代表OpenCV2和OpenCV3版本：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>opencv<br></code></pre></td></tr></table></figure><p>于是一开始我就很傻地直接用命令安装了，可是比较坑的地方是，作业里这次使用的是OpenCV2版本的代码，里面有一些库无法兼容，且修改起来较为麻烦，于是只能卸载重装，可是重装之后出现了一些问题。</p><p>首先uninstall opencv之后，又install opencv@2之后，系统提示：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">opencv@2 is keg-only, which means it was <span class="hljs-keyword">not</span> symlinked into /usr/local,<br><br>because this is an alternate version of another formula.<br><br><br><span class="hljs-keyword">If</span> you need <span class="hljs-keyword">to</span> have opencv@2 first <span class="hljs-keyword">in</span> your PATH run:<br><br>  echo <span class="hljs-string">&#x27;export PATH=&quot;/usr/local/opt/opencv@2/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bash_profile<br><br><br><span class="hljs-keyword">For</span> compilers <span class="hljs-keyword">to</span> <span class="hljs-built_in">find</span> opencv@2 you may need <span class="hljs-keyword">to</span> set:<br><br>  <span class="hljs-built_in">export</span> <span class="hljs-attribute">LDFLAGS</span>=<span class="hljs-string">&quot;-L/usr/local/opt/opencv@2/lib&quot;</span><br><br>  <span class="hljs-built_in">export</span> <span class="hljs-attribute">CPPFLAGS</span>=<span class="hljs-string">&quot;-I/usr/local/opt/opencv@2/include&quot;</span><br><br><br><span class="hljs-keyword">For</span> pkg-config <span class="hljs-keyword">to</span> <span class="hljs-built_in">find</span> opencv@2 you may need <span class="hljs-keyword">to</span> set:<br><br>  <span class="hljs-built_in">export</span> <span class="hljs-attribute">PKG_CONFIG_PATH</span>=<span class="hljs-string">&quot;/usr/local/opt/opencv@2/lib/pkgconfig&quot;</span><br></code></pre></td></tr></table></figure><p>其实没有太弄清楚出现这个具体是出于什么原因，因为存在两种可能：</p><ol><li>之前安装的opencv3卸载之后环境没有清理干净，于是opencv2无法按照默认的路径配置环境；</li><li>当前主流的OpenCV版本是3，也就是说OpenCV2已经out-of-date了，所以不再按照默认路径配置环境。</li></ol><p>但不管原因是什么，还是要手动配置一下环境的，不然PATH和compilers这些都没法找到OpenCV2，打开~&#x2F;.bash_profile，在里面添加上面所提到的一系列export语句即可，（我是考虑到近期用不到OpenCV3的版本，所以不是很怕版本冲突，把所有相关的都绑定在OpenCV2上了。）<strong>但是要说明的是，不知道这个步骤是否有效帮助了最后程序的运行，即有可能不这样配置也没问题。</strong></p><p>可是这样配置环境之后，程序依然无法运行，后来去重新检查了CMakeLists.txt文件，发现里面显示报错：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Could <span class="hljs-keyword">not</span> find module FindOpenCV.cmake <span class="hljs-keyword">or</span> <span class="hljs-keyword">a</span> configuration <span class="hljs-built_in">file</span> <span class="hljs-keyword">for</span> package<br>  OpenCV.<br><br>  Adjust CMAKE_MODULE_PATH <span class="hljs-built_in">to</span> find FindOpenCV.cmake <span class="hljs-keyword">or</span> <span class="hljs-built_in">set</span> OpenCV_DIR <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span><br>  <span class="hljs-built_in">directory</span> containing <span class="hljs-keyword">a</span> CMake configuration <span class="hljs-built_in">file</span> <span class="hljs-keyword">for</span> OpenCV.  The <span class="hljs-built_in">file</span> will<br>  have <span class="hljs-literal">one</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> following names:<br><br>    OpenCVConfig.cmake<br>    opencv-config.cmake<br></code></pre></td></tr></table></figure><p>在<a href="https://stackoverflow.com/questions/8711109/could-not-find-module-findopencv-cmake-error-in-configuration-process">stackoverflow上面搜到了相关的问题</a>，里面提供了挺多的方案，其实本质上就是说它没法按照缺省的设置找到OpenCV的相关文件’，需要手动配置一下，所以首先需要在自己的电脑上找到相关文件的路径位置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -name <span class="hljs-string">&quot;OpenCVConfig.cmake&quot;</span><br><br>&lt;path_of_opencv&gt;<br></code></pre></td></tr></table></figure><p>然后把OpenCV_DIR的值设置为找到的包含那个文件的那个路径，我采取的方案是在CMakeLists.txt前面添加语句：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">set (OpenCV_DIR <span class="hljs-regexp">/home/</span>cmake<span class="hljs-regexp">/opencv/</span>compiled) <span class="hljs-comment">#change the path to match your complied directory of opencv</span><br></code></pre></td></tr></table></figure><p>能够有效解决问题，sof上还提供了一些别的设置方法，可以供参考：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">OpenCV_DIR</span>=&lt;path_of_opencv&gt;<br></code></pre></td></tr></table></figure><h2 id="4-CLion配置OpenCV环境"><a href="#4-CLion配置OpenCV环境" class="headerlink" title="4. CLion配置OpenCV环境"></a>4. CLion配置OpenCV环境</h2><p>在CLion中的CMakeLists.txt中配置如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">cmake_minimum_required</span><span class="hljs-params">(VERSION <span class="hljs-number">3.9</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">project</span><span class="hljs-params">(untitled1)</span></span><br><br><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)</span></span><br><br><span class="hljs-selector-id">#find_library</span>(OpenCV)<br><span class="hljs-function"><span class="hljs-title">find_package</span><span class="hljs-params">(OpenCV)</span></span><br><br><span class="hljs-function"><span class="hljs-title">include_directories</span><span class="hljs-params">($&#123;OpenCV_INCLUDE_DIRS&#125;)</span></span><br><br><span class="hljs-function"><span class="hljs-title">add_executable</span><span class="hljs-params">(untitled1 main.cpp)</span></span><br><span class="hljs-function"><span class="hljs-title">target_link_libraries</span><span class="hljs-params">(untitled1 $&#123;OpenCV_LIBS&#125;)</span></span><br></code></pre></td></tr></table></figure><p>可以像<a href="https://www.jianshu.com/p/b705d9eee23d">这篇简书的文章</a>中写一个简单的main.cpp进行验证：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/opencv.hpp&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Mat srcImage = <span class="hljs-built_in">imread</span>(<span class="hljs-string">&quot;your_img_path.jpg&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!srcImage.data) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Image not loaded&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;[img]&quot;</span>, srcImage);<br>    <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://stackoverflow.com/questions/8711109/could-not-find-module-findopencv-cmake-error-in-configuration-process">stackoverflow上关于无法找到opencv相关文件的问答</a></p><p><a href="https://www.jianshu.com/p/b705d9eee23d">Mac CLion配置OpenCV环境</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>opencv2</tag>
      
      <tag>clion</tag>
      
      <tag>macos</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac OS：Python-igraph &amp; Cairo &amp; Pycairo安装踩坑历程</title>
    <link href="/2019/02/20/2019-02-20-Mac%20OS%EF%BC%9APython-igraph%20&amp;%20Cairo%20&amp;%20Pycairo%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91%E5%8E%86%E7%A8%8B/"/>
    <url>/2019/02/20/2019-02-20-Mac%20OS%EF%BC%9APython-igraph%20&amp;%20Cairo%20&amp;%20Pycairo%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="在Mac-OS-X上使用igraph相关库作图可视化"><a href="#在Mac-OS-X上使用igraph相关库作图可视化" class="headerlink" title="在Mac OS X上使用igraph相关库作图可视化"></a>在Mac OS X上使用igraph相关库作图可视化</h2><p>昨天突然收到小伙伴作业里的一个需求，需要把作业里的一个图可视化，小伙伴提示说可以借助python里的igraph这个库实现，于是就开始尝试了一下。</p><span id="more"></span><p>这个图应该是社区发现里比较经典的，大概形式如下图，使用的是<a href="https://blog.csdn.net/liuhuan323/article/details/78936781">这个博客</a>中提供的代码。不过在安装的过程中踩了一些坑，也没有找到太多汉化的教程，于是希望把这个过程记录一下。 这个过程仅基于Mac OS系统，其它系统应该也可以在相关网站找到教程。</p><p><img src="/./img/dolphin.png" alt="Image"></p><h3 id="踩坑过程"><a href="#踩坑过程" class="headerlink" title="踩坑过程"></a>踩坑过程</h3><p>这一部分说<strong>错误</strong>的安装方式，可以直接跳到<strong>正确安装</strong>的步骤查看。</p><h3 id="1-安装python-igraph"><a href="#1-安装python-igraph" class="headerlink" title="1. 安装python-igraph"></a>1. 安装python-igraph</h3><p>python-igraph库的安装很简单，直接使用pip命令</p>   <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> python-igraph<br></code></pre></td></tr></table></figure><h3 id="2-安装Cairo"><a href="#2-安装Cairo" class="headerlink" title="2. 安装Cairo"></a>2. 安装Cairo</h3><p>要实现可视化，还需要借助Cairo库。在igraph的官方网站上（<a href="https://igraph.org/python/doc/tutorial/install.html#installing-igraph%EF%BC%89%E7%BB%99%E5%87%BA%E4%BA%86%E5%9F%BA%E4%BA%8EMac">https://igraph.org/python/doc/tutorial/install.html#installing-igraph）给出了基于Mac</a> OS的画图方法<u>Graph plotting in <em>igraph</em> on Mac OS X</u>，上面提到可以在Cairo的主页上找到安装方法，并说没有提供Mac OS的预编译安装软件，但可以借助MacPorts和Fink进行安装：</p><h3 id="基于MacPorts"><a href="#基于MacPorts" class="headerlink" title="基于MacPorts"></a>基于MacPorts</h3>   <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment"># 安装</span><br>sudo <span class="hljs-keyword">port</span> install cairo<br><span class="hljs-comment"># 升级</span><br>sudo <span class="hljs-keyword">port</span> upgrade cairo<br></code></pre></td></tr></table></figure><p>   但是因为电脑上没有安装MacPorts，所以首先还要进行MacPorts的安装，直接在MacPorts主页上（<a href="https://www.macports.org/install.php%EF%BC%89%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85%EF%BC%8C%E5%92%8C%E4%B8%80%E8%88%AC%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%80%E6%A0%B7%E4%BD%BF%E7%94%A8Mac">https://www.macports.org/install.php）根据系统版本下载安装包，和一般软件的安装过程一样使用Mac</a> OS X Package Installer，这样会自动安装到默认路径。在安装的过程中可能会卡顿比较长的时间，虽然只有十几M但是安装了可能有一两个小时之久。（一开始以为安装包有问题还重启了一次，其实没有必要等着就好）</p><p>   安装完之后尝试使用port指令安装cairo，但是出现了报错：</p>   <figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>Port cairo not found<br></code></pre></td></tr></table></figure><p>   搜索了一下发现很多是环境变量设置的问题，说要修改~&#x2F;.bash_profile文件，添加相关路径，但是修改之后发现也没有用仍然报错，后来就随便试了一下更新了一下port：</p>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo port -v selfupdate</span><br></code></pre></td></tr></table></figure><p>   更新完之后居然就好了，然后就正常安装，安装cairo的时候还需要先安装一系列依赖，反正又更了很长时间：</p>   <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">The following dependencies will <span class="hljs-keyword">be </span><span class="hljs-keyword">installed: </span><br><br> <span class="hljs-keyword">bzip2</span><br><span class="hljs-keyword"></span><br> db48<br><br> expat<br><br> fontconfig<br><br> freetype<br><br> gdbm<br><br> gettext<br><br> glib2<br><br> icu<br><br> libedit<br><br> libffi<br><br> libiconv<br><br> libpixman<br><br> libpng<br><br> libxml2<br><br> ncurses<br><br> openssl<br><br> ossp-uuid<br><br> pcre<br><br> perl5.<span class="hljs-number">26</span><br><br> python27<br><br> python2_select<br><br> python_select<br><br> readline<br><br> sqlite3<br><br> <span class="hljs-keyword">xorg-libX11</span><br><span class="hljs-keyword"></span><br> <span class="hljs-keyword">xorg-libXau</span><br><span class="hljs-keyword"></span><br> <span class="hljs-keyword">xorg-libXdmcp</span><br><span class="hljs-keyword"></span><br> <span class="hljs-keyword">xorg-libXext</span><br><span class="hljs-keyword"></span><br> <span class="hljs-keyword">xorg-libpthread-stubs</span><br><span class="hljs-keyword"></span><br> <span class="hljs-keyword">xorg-libxcb</span><br><span class="hljs-keyword"></span><br> <span class="hljs-keyword">xorg-xcb-proto</span><br><span class="hljs-keyword"></span><br> <span class="hljs-keyword">xorg-xcb-util</span><br><span class="hljs-keyword"></span><br> <span class="hljs-keyword">xorg-xorgproto</span><br><span class="hljs-keyword"></span><br> xrender<br><br> xz<br><br> zlib<br></code></pre></td></tr></table></figure><p>   刚发现这里还是python27。。。无奈，就这样以为终于装好了Cairo。</p><h4 id="基于Fink"><a href="#基于Fink" class="headerlink" title="基于Fink"></a>基于Fink</h4>   <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install cairo<br></code></pre></td></tr></table></figure><p>   因为也没有安装fink，所以没有尝试这个方法。</p><h3 id="3-安装Pycairo"><a href="#3-安装Pycairo" class="headerlink" title="3. 安装Pycairo"></a>3. 安装Pycairo</h3><p>到这里以为装完了Cairo，但是因为需要在python里调用，所以还需要Cairo的python绑定Pycairo。</p><p>   根据igraph主页上的建议，可以在PyCairo的主页上（<a href="https://www.cairographics.org/pycairo/%EF%BC%89%E6%89%BE%E5%88%B0%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95%EF%BC%8C%E4%B9%9F%E6%B2%A1%E6%9C%89%E6%8F%90%E4%BE%9B%E9%A2%84%E7%BC%96%E8%AF%91%E5%A5%BD%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%EF%BC%8C%E6%89%80%E4%BB%A5%E6%83%B3%E7%94%A8tar%E5%8C%85%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85%EF%BC%8C%E4%B8%8B%E8%BD%BD%E4%BA%86%E6%96%87%E4%BB%B6pycairo-1.18.0.tar.gz%EF%BC%8C%E8%A7%A3%E5%8E%8B%E4%B9%8B%E5%90%8E%E9%87%8C%E9%9D%A2%E6%9C%89%E4%B8%80%E4%B8%AAsetup.py%E6%96%87%E4%BB%B6%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B8%8D%E7%9F%A5%E9%81%93%E5%85%B7%E4%BD%93%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%82%E6%95%B0%E3%80%82%E3%80%82%E3%80%82make%E5%95%A5%E7%9A%84%E4%B9%9F%E4%B8%8D%E8%A1%8C%E3%80%82%E3%80%82%E3%80%82%E5%90%8E%E6%9D%A5%E4%B8%8D%E7%9F%A5%E9%81%93%E5%9C%A8%E5%93%AA%E7%9C%8B%E7%9A%84%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87easy_install%E5%AE%89%E8%A3%85%EF%BC%8C">https://www.cairographics.org/pycairo/）找到安装方法，也没有提供预编译好的安装包，所以想用tar包的方式安装，下载了文件pycairo-1.18.0.tar.gz，解压之后里面有一个setup.py文件，但是不知道具体的安装参数。。。make啥的也不行。。。后来不知道在哪看的可以直接通过easy_install安装，</a></p>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">easy_install pycairo</span><br></code></pre></td></tr></table></figure><p>   这个的过程其实还是自动下载.tar.gz包，然后安装，但是不出意外地又报错了：</p>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">Searching <span class="hljs-keyword">for</span> pycairo<br><br>Reading https:<span class="hljs-regexp">//</span>pypi.org<span class="hljs-regexp">/simple/</span>pycairo/<br><br>Downloading https:<span class="hljs-regexp">//</span>files.pythonhosted.org<span class="hljs-regexp">/packages/</span>a6<span class="hljs-regexp">/54/</span><span class="hljs-number">23</span>d6cf3e8d8f1eb30e0e58f171b6f62b2ea75c024935492373639a1a08e4/pycairo-<span class="hljs-number">1.18</span>.<span class="hljs-number">0</span>.tar.gz<span class="hljs-comment">#sha256=abd42a4c9c2069febb4c38fe74bfc4b4a9d3a89fea3bc2e4ba7baff7a20f783f</span><br><br>Best match: pycairo <span class="hljs-number">1.18</span>.<span class="hljs-number">0</span><br><br>Processing pycairo-<span class="hljs-number">1.18</span>.<span class="hljs-number">0</span>.tar.gz<br><br>Writing <span class="hljs-regexp">/var/</span>folders<span class="hljs-regexp">/lh/</span><span class="hljs-number">14</span>hpyxpn0ps32ltr2b8cz8w80000gn<span class="hljs-regexp">/T/</span>easy_install-w_x2q5nz<span class="hljs-regexp">/pycairo-1.18.0/</span>setup.cfg<br><br>Running pycairo-<span class="hljs-number">1.18</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/setup.py -q bdist_egg --dist-dir /</span>var<span class="hljs-regexp">/folders/</span>lh<span class="hljs-regexp">/14hpyxpn0ps32ltr2b8cz8w80000gn/</span>T<span class="hljs-regexp">/easy_install-w_x2q5nz/</span>pycairo-<span class="hljs-number">1.18</span>.<span class="hljs-number">0</span>/egg-dist-tmp-rz1_9p9j<br><br>no previously-included directories found matching <span class="hljs-string">&#x27;docs/_build&#x27;</span><br><br>warning: no files found matching <span class="hljs-string">&#x27;README&#x27;</span> under directory <span class="hljs-string">&#x27;tests&#x27;</span><br><br>warning: no files found matching <span class="hljs-string">&#x27;README&#x27;</span> under directory <span class="hljs-string">&#x27;examples&#x27;</span><br><br>error: Setup script exited with <span class="hljs-string">&#x27;pkg-config&#x27;</span> not found.<br><br>Command [<span class="hljs-string">&#x27;pkg-config&#x27;</span>, <span class="hljs-string">&#x27;--print-errors&#x27;</span>, <span class="hljs-string">&#x27;--exists&#x27;</span>, <span class="hljs-string">&#x27;cairo &gt;= 1.13.1&#x27;</span>]<br></code></pre></td></tr></table></figure><p>   但是在这里面可以看到执行setup.py的相关参数，所以又去自己下载的包里直接执行了一次，结果还是一样的报错：</p>   <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">no</span> previously-included directories <span class="hljs-built_in">found</span> matching <span class="hljs-string">&#x27;docs/_build&#x27;</span><br><br><span class="hljs-built_in">warning</span>: <span class="hljs-keyword">no</span> files <span class="hljs-built_in">found</span> matching <span class="hljs-string">&#x27;README&#x27;</span> under directory <span class="hljs-string">&#x27;tests&#x27;</span><br><br><span class="hljs-built_in">warning</span>: <span class="hljs-keyword">no</span> files <span class="hljs-built_in">found</span> matching <span class="hljs-string">&#x27;README&#x27;</span> under directory <span class="hljs-string">&#x27;examples&#x27;</span><br><br><span class="hljs-string">&#x27;pkg-config&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">found</span>.<br><br>Command [<span class="hljs-string">&#x27;pkg-config&#x27;</span>, <span class="hljs-string">&#x27;--print-errors&#x27;</span>, <span class="hljs-string">&#x27;--exists&#x27;</span>, <span class="hljs-string">&#x27;cairo &gt;= 1.13.1&#x27;</span>]<br></code></pre></td></tr></table></figure><p>   大概应该是缺少了pkg-config这个依赖？</p><p>   后来又看到可以直接用pip命令安装pycairo，但是不出意外地又出错了（心态崩溃），</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">pip install pycairo<br><br><span class="hljs-meta prompt_">...</span><br>&#x27;pkg-config&#x27; not found<br><span class="hljs-meta prompt_">...</span><br>Failed building wheel for pycairo<br><span class="hljs-meta prompt_">...</span><br></code></pre></td></tr></table></figure><p>   似乎还是在说缺少pkg-config，于是又用homebrew装这个包：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>pkg-<span class="hljs-built_in">config</span><br></code></pre></td></tr></table></figure><p>   然后再尝试安装cairo，结果又报错了：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">No</span> package <span class="hljs-string">&#x27;cairo&#x27;</span> <span class="hljs-built_in">found</span><br></code></pre></td></tr></table></figure><p>   说找不到cairo…然后几乎就放弃了这种方法。</p><p>   上面的过程基本上是基于igraph官方网站的建议，因为后面pycairo的安装没有说的很详细，到最后也没有成功，所以就感觉踩了一路坑。大概就是cairo主页上的安装方式不太靠谱，得使用pycairo上的安装方式。</p><p>后来直接在pycairo的主页上（<a href="https://pycairo.readthedocs.io/en/latest/getting_started.html%EF%BC%89%E6%89%BE%E5%88%B0%E4%BA%86%E7%89%B9%E5%88%AB%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82%E3%80%82%E3%80%82%E5%A6%82%E4%B8%8B%E3%80%82%E3%80%82%E3%80%82">https://pycairo.readthedocs.io/en/latest/getting_started.html）找到了特别简单的方法。。。如下。。。</a></p><h2 id="正确步骤"><a href="#正确步骤" class="headerlink" title="正确步骤"></a>正确步骤</h2><h3 id="1-安装python-igraph-1"><a href="#1-安装python-igraph-1" class="headerlink" title="1. 安装python-igraph"></a>1. 安装python-igraph</h3><p>直接用pip命令安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> python-igraph<br></code></pre></td></tr></table></figure><p>安装后可以在终端里import测试一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> igraph.test<br><span class="hljs-meta">&gt;&gt;&gt; </span>igraph.test.run_tests()<br></code></pre></td></tr></table></figure><p>也可以查看一下安装的版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> igraph<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> igraph.__version<br></code></pre></td></tr></table></figure><h3 id="2-安装Cairo-1"><a href="#2-安装Cairo-1" class="headerlink" title="2. 安装Cairo"></a>2. 安装Cairo</h3><p>要实现可视化，还需要借助Cairo库。</p><p>利用Homebrew在Mac OS上进行安装：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>cairo pkg-<span class="hljs-built_in">config</span><br></code></pre></td></tr></table></figure><p>其它平台的安装参见<a href="https://pycairo.readthedocs.io/en/latest/getting_started.html">https://pycairo.readthedocs.io/en/latest/getting_started.html</a></p><h3 id="3-安装Pycairo-1"><a href="#3-安装Pycairo-1" class="headerlink" title="3. 安装Pycairo"></a>3. 安装Pycairo</h3><p>除了Cairo库之外，因为需要在python里调用，所以还需要Cairo的python绑定Pycairo。</p><p>实际上现在只需要pip命令即可，这里的最新版本为pycairo-1.18.0</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> pycairo<br></code></pre></td></tr></table></figure><p>这样就可以正常利用igraph和Cairo库画图啦，igraph主页（<a href="https://igraph.org/python/doc/tutorial/tutorial.html%EF%BC%89%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%80%E4%BA%9B%E6%95%99%E7%A8%8B%E4%BE%9B%E5%8F%82%E8%80%83%E3%80%82">https://igraph.org/python/doc/tutorial/tutorial.html）提供了一些教程供参考。</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://igraph.org/python/doc/tutorial/install.html#installing-igraph">igraph主页安装建议</a></p><p><a href="https://www.macports.org/install.php">MacPorts主页port安装方法</a></p><p><a href="https://www.cairographics.org/pycairo/">cairo主页上的pycairo安装建议</a></p><p><a href="https://pycairo.readthedocs.io/en/latest/getting_started.html">pycairo主页的安装建议</a></p><p><a href="https://blog.csdn.net/liuhuan323/article/details/78936781">作图代码来源</a></p><p><a href="https://igraph.org/python/doc/tutorial/tutorial.html">igraph主页作图教程</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>igraph</tag>
      
      <tag>cairo</tag>
      
      <tag>pycairo</tag>
      
      <tag>可视化</tag>
      
      <tag>社区发现</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单机（伪分布式）Hadoop系统安装踩坑历程</title>
    <link href="/2018/10/29/2018-10-29-%E5%8D%95%E6%9C%BA%EF%BC%88%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%EF%BC%89Hadoop%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91%E5%8E%86%E7%A8%8B/"/>
    <url>/2018/10/29/2018-10-29-%E5%8D%95%E6%9C%BA%EF%BC%88%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%EF%BC%89Hadoop%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>在做作业的时候需要配置Hadoop单机系统环境，但是课程的PPT里各种坑，在这里记录下一些踩坑过程。</p><span id="more"></span><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ul><li>Linux</li><li>Java 1.8</li></ul><h3 id="SSH安装与配置"><a href="#SSH安装与配置" class="headerlink" title="SSH安装与配置"></a>SSH安装与配置</h3><ul><li><p>安装ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install openssh-server<br></code></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo /etc/init.d/ssh start<br></code></pre></td></tr></table></figure></li><li><p>查看启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -e | grep ssh<br></code></pre></td></tr></table></figure></li><li><p>设置免密码登录，生成私钥与公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -P <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>此时会在／home／hadoop&#x2F;.ssh下生成两个文件：id_rsa和id_rsa.pub，前者为私钥，后者为公钥。将公钥追加到authorized_keys中，它用户保存所有允许以当前用户身份登录到ssh客户端用户的公钥内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure></li><li><p>测试ssh是否能登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh localhost<br></code></pre></td></tr></table></figure></li><li><p>退出登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">groupadd hadoop-user<br>useradd -g hadoop_user -d /home/hadoop -m hadoop<br></code></pre></td></tr></table></figure><ul><li>如果成功创建，会在&#x2F;home目录下出现新文件夹&#x2F;hadoop（非手动创建）</li><li>很多人创建用户之后，在系统中无法找到&#x2F;home&#x2F;hadoop文件夹，通常是因为没有加用于自动建立用户登入目录的-m指令</li><li>这一步不创建用户组也没有太大关系，创建用户之后再加入到指定用户组也可</li><li>指令可以用于查看创建的用户和用户组</li></ul><h3 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h3><ul><li><p>切换到hadoop用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su - hadoop<br></code></pre></td></tr></table></figure><p>切换用户之后，会出现下面的情况，这是因为配置文件还未生效</p></li><li><p>hadoop各版本下载地址：<br><a href="http://archive.apache.org/dist/hadoop/core/">http://archive.apache.org/dist/hadoop/core/</a><br>这里选择版本为2.7.1</p></li><li><p>下载完成后可以直接解压到&#x2F;home&#x2F;hadoop文件夹下，也可以新建一个&#x2F;hadoop_installs文件夹存放安装文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/hadoop_installs<br><span class="hljs-built_in">cd</span> hadoop_installs<br>tar –zxvf hadoop-2.7.1.tar.gz<br></code></pre></td></tr></table></figure></li></ul><h3 id="配置hadoop环境变量"><a href="#配置hadoop环境变量" class="headerlink" title="配置hadoop环境变量"></a>配置hadoop环境变量</h3><p>  接下来对配置文件进行修改</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim bash_profile<br></code></pre></td></tr></table></figure><p>环境变量配置如下：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOME</span>/bin<br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/java/java-1.7<br><span class="hljs-built_in">export</span> HADOOP_HOME=/home/hadoop/hadoop_installs/hadoop-2.7.1 <span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$HADOOP_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span>/lib:.<br></code></pre></td></tr></table></figure><p>执行命令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>使配置生效</p><h3 id="修改hadoop配置文件"><a href="#修改hadoop配置文件" class="headerlink" title="修改hadoop配置文件"></a>修改hadoop配置文件</h3><p>Hadoop的配置文件存放在hadoop安装目录下的etc&#x2F;hadoop目录中，主要有以下几个配置文件要修改:</p><ul><li>hadoop-env.sh:Hadoop环境变量设置</li><li>core-site.xml:主要完成NameNode的IP和端口设置</li><li>hdfs-site.xml:主要完成HDFS的数据块副本等参数设置</li><li>yarn-site.xml :完成ResouceManager的主机名和服务等配置</li><li>mapred-site.xml:主要完成mapreduce framework设置和jobhistory server的设置</li></ul><h3 id="格式化文件系统"><a href="#格式化文件系统" class="headerlink" title="格式化文件系统"></a>格式化文件系统</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdfs namenode -format<br></code></pre></td></tr></table></figure><p>如果格式化成功，会返回一堆有关NameNode的启动信息，其中会有一句“…. has been successfully formatted.”</p><p><font color=#FF0000>注意这个命令只需要执行一次，如果多次执行可能会破坏文件系统。</font></p><h3 id="启动HDFS和MapReduce"><a href="#启动HDFS和MapReduce" class="headerlink" title="启动HDFS和MapReduce"></a>启动HDFS和MapReduce</h3><ul><li><p>启动HDFS和MapReduce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">start-all.sh<br></code></pre></td></tr></table></figure></li><li><p>停止HDFS和MapReduce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">stop-all.sh<br></code></pre></td></tr></table></figure></li><li><p>查看节点启动情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jps<br></code></pre></td></tr></table></figure></li></ul><h3 id="节点未启动问题"><a href="#节点未启动问题" class="headerlink" title="节点未启动问题"></a>节点未启动问题</h3><p>在实际配置中，发现有时会出现节点未启动的情况，多是NameNode或DataNode未能成功启动，<strong>多是因为执行了多次格式化文件系统命令</strong>。出现该问题的原因有很多可能，<strong>可以通过查看log日志寻找错误</strong>。笔者配置过程中遇到的问题包括：</p><ul><li><p>NameNode节点无法启动</p><blockquote><p>There appears to be a gap in the edit log.  We expected txid 1, but got txid 58.</p></blockquote><p>- 原因：namenode元数据被破坏，需要修复</p><p>- 解决：恢复一下namenode<br>  hdfs namenode -recover<br>一直选择c，一般就OK了</p></li><li><p>DataNode节点无法启动</p><p>- 直接原因：<br>DataNode的clusterID 和 NameNode的clusterID 不匹配。</p><p>- 间接原因：<br>在第一次格式化dfs后，启动并使用了hadoop，后来又重新执行了格式化命令（hdfs namenode -format)，这时namenode的clusterID会重新生成，而datanode的clusterID 保持不变。</p><p>- 解决办法：<br>打开etc&#x2F;hadoop&#x2F;hdfs-site.xml里配置的datanode和namenode对应的目录，分别打开current文件夹里的VERSION，可以看到clusterID项正如日志里记录的一样，确实不一致，修改datanode里VERSION文件的clusterID与namenode里的一致，再重新启动dfs（执行start-dfs.sh）再执行jps命令可以看到datanode已正常启动。</p><p>(参考：<br>  <a href="https://blog.csdn.net/u014686180/article/details/46457081">https://blog.csdn.net/u014686180/article/details/46457081</a></p></li><li><p>Call to localhost&#x2F;127.0.0.1:9000 failed on connection exception错误</p><ul><li>将目录&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;tmp&#x2F;dfs&#x2F;name和&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;tmp&#x2F;dfs&#x2F;data中的内容清空。</li><li>然后执行bin&#x2F;hadoop namenode -format命令</li><li>重启hadoop</li><li>问题解决</li></ul></li></ul><h2 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h2><h3 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h3><blockquote><p>WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable</p></blockquote><p>这是由于环境变量未配置完全引起的，只需要对.bashrc进行配置即可。</p><pre><code class="hljs">    vim ~/.bashrc</code></pre><p>写入环境变量</p><pre><code class="hljs">    export HADOOP_HOME=/home/hadoop/hadoop-2.6.4    export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native    export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib:$HADOOP_COMMON_LIB_NATIVE_DIR&quot;</code></pre><p>执行命令</p><pre><code class="hljs">    source ~/.bashrc</code></pre><p>使配置生效</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在解决这个问题的过程中发现，如果修改后的.bash_profile仍然存在问题，则terminal中的各种指令会继续无效，这时需要重复以上步骤直到.bash_profile中的所有问题都被修正为止。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/weichuang_1/article/details/47679465">Mac的控制台命令无法使用command not found</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hadoop MapReduce Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac OS terminal中所有命令失效</title>
    <link href="/2018/10/08/2018-10-08-Mac%20OS%20terminal%E4%B8%AD%E6%89%80%E6%9C%89%E5%91%BD%E4%BB%A4%E5%A4%B1%E6%95%88/"/>
    <url>/2018/10/08/2018-10-08-Mac%20OS%20terminal%E4%B8%AD%E6%89%80%E6%9C%89%E5%91%BD%E4%BB%A4%E5%A4%B1%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p>今天在修改系统变量的时候遇到了键盘大小写切换失败的问题，百度结果大部分建议重启系统，当时比较着急就直接退出了vim关机，没有检查.bash_profile是否修改完备；重新开机之后发现使用很多命令的结果都是Command not FOUND,包括了sudo、vim这些常见命令。百度之后发现相关解决方式并不多，看到了一篇CSDN博客给出了相应的解决办法，在这里记录一下。</p><span id="more"></span><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><h4 id="第一步，在终端中输入"><a href="#第一步，在终端中输入" class="headerlink" title="第一步，在终端中输入"></a>第一步，在终端中输入</h4><pre><code class="hljs">    export PATH=/usr/bin:/usr/sbin:/bin:/sbin:/usr/X11R6/bin</code></pre><h4 id="第二步，进入home目录"><a href="#第二步，进入home目录" class="headerlink" title="第二步，进入home目录"></a>第二步，进入home目录</h4><pre><code class="hljs">    cd ~/</code></pre><h4 id="第三步，创建bash-profile执行命令"><a href="#第三步，创建bash-profile执行命令" class="headerlink" title="第三步，创建bash_profile执行命令"></a>第三步，创建bash_profile执行命令</h4><pre><code class="hljs">    touch .bash_profile</code></pre><h4 id="第四步，打开并编辑bash-profile"><a href="#第四步，打开并编辑bash-profile" class="headerlink" title="第四步，打开并编辑bash_profile"></a>第四步，打开并编辑bash_profile</h4><pre><code class="hljs">    open .bash_profile</code></pre><h4 id="第五步，这样会打开一个记事本，显示之前配置过的path，修改记事本或者不修改，并保存文件退出"><a href="#第五步，这样会打开一个记事本，显示之前配置过的path，修改记事本或者不修改，并保存文件退出" class="headerlink" title="第五步，这样会打开一个记事本，显示之前配置过的path，修改记事本或者不修改，并保存文件退出"></a>第五步，这样会打开一个记事本，显示之前配置过的path，修改记事本或者不修改，并保存文件退出</h4><h4 id="第六步，运行使修改后的bash-profile生效"><a href="#第六步，运行使修改后的bash-profile生效" class="headerlink" title="第六步，运行使修改后的bash_profile生效"></a>第六步，运行使修改后的bash_profile生效</h4><pre><code class="hljs">    source .bash_profile</code></pre><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在解决这个问题的过程中发现，如果修改后的.bash_profile仍然存在问题，则terminal中的各种指令会继续无效，这时需要重复以上步骤直到.bash_profile中的所有问题都被修正为止。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/weichuang_1/article/details/47679465">Mac的控制台命令无法使用command not found</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>一日一记</tag>
      
      <tag>MacOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python里的Unicode编码问题 Again</title>
    <link href="/2018/03/09/2018-03-09-Python%E9%87%8C%E7%9A%84Unicode%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%20Again/"/>
    <url>/2018/03/09/2018-03-09-Python%E9%87%8C%E7%9A%84Unicode%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%20Again/</url>
    
    <content type="html"><![CDATA[<p>Python里的编码问题一开始碰到其实是在一年前，当时想要爬取网上的内容，但是爬下来的东西很多时候会出现乱码；但是当时时间比较紧张，没有仔细再去理解里面的原因；这几天跑代码的时候又遇到了，所以就仔细查了一些资料。</p><span id="more"></span><p>相关的Encode和Decode问题描述维基百科可见。</p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="第一类错误：decode相关"><a href="#第一类错误：decode相关" class="headerlink" title="第一类错误：decode相关"></a>第一类错误：decode相关</h3><pre><code class="hljs">    &quot;\x81&quot;.decode(&quot;utf-8&quot;)    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;      File &quot;encodings/utf_8.py&quot;, line 16, in decode    UnicodeDecodeError: &#39;utf8&#39; codec can&#39;t decode byte 0x81 in position 0: unexpected code byte</code></pre><h3 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h3><p>这种错误通常发生在以某种编码(“ascii”)解码一个str类型的字符串时.因为编码映射仅仅只能支持一部分str类型的字符串到unicode字符串, 一个非法的str类型的序列将会导致编码decode()失败。</p><p>在这里，str字符串\x81就不能转化为unicode对应的字符串。</p><h3 id="第二类错误：encode相关"><a href="#第二类错误：encode相关" class="headerlink" title="第二类错误：encode相关"></a>第二类错误：encode相关</h3><pre><code class="hljs">    &gt;&gt;&gt; &quot;\xd0\x91&quot;.encode(&quot;utf-8&quot;)    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;    UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xd0 in position 0: ordinal not in range(128)</code></pre><h3 id="错误原因：-1"><a href="#错误原因：-1" class="headerlink" title="错误原因："></a>错误原因：</h3><p>自相矛盾的是，UnicodeDecodeError也可能发生在编码__encoding__时。<br>原因是编码函数encode()通常情况下需要一个unicode类型的字符串作为参数。但是实际传过来的是一个str类型的参数。encode()函数将这个参数向上转换”up-convert”为unicode类型，然后再将转化为他们自己的编码。这也会出现这样的向上转换”up-convertion”的时候，系统默认选择一个ascii解码器, 解码器中没有这个str类型的unicode编码。因此这是在一个编码器encoder中出现解码失败的情况。</p><p>在这个过程中发生了两件事情。首先\xd0\x91是python默认的str类型的字符串，而编码encode需要一个unicode类型的字符串，所以在编码encode之前，先转化为unicode,而执行的是”\xd0\x91”.decode(“ascii”), 所以会出现上面的错误。(之所以是ascii是因为这是系统默认的编码方式，且是所有编码方式交换的中介</p><h2 id="str和unicode"><a href="#str和unicode" class="headerlink" title="str和unicode"></a>str和unicode</h2><p>str和unicode都是basestring的子类</p><h3 id="str和unicode的转换方式"><a href="#str和unicode的转换方式" class="headerlink" title="str和unicode的转换方式"></a>str和unicode的转换方式</h3><p>str  -&gt;  decode(‘the_coding_of_str’)  -&gt;  unicode</p><p>unicode  -&gt;  encode(‘the_coding_you_want’)  -&gt;  str</p><h3 id="str"><a href="#str" class="headerlink" title="str"></a>str</h3><p>声明方式</p><pre><code class="hljs">    s = &#39;中文&#39;    s = u&#39;中文&#39;.encode(&#39;utf-8&#39;)        &gt;&gt;&gt; type(&#39;中文&#39;)</code></pre><h3 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h3><p>声明方式</p><pre><code class="hljs">    s = u&#39;中文&#39;    s = &#39;中文&#39;.decode(&#39;utf-8&#39;)    s = unicode(&#39;中文&#39;,&#39;utf-8&#39;)        &gt;&gt;&gt; type(u&#39;中文&#39;)</code></pre><h4 id="判断是否为unicode-x2F-str的方法"><a href="#判断是否为unicode-x2F-str的方法" class="headerlink" title="判断是否为unicode&#x2F;str的方法"></a>判断是否为unicode&#x2F;str的方法</h4><pre><code class="hljs">    &gt;&gt;&gt; isinstance(u&#39;中文&#39;,unicode)    True    &gt;&gt;&gt; isinstance(&#39;中文&#39;,unicode)    False        &gt;&gt;&gt; isinstance(&#39;中文&#39;,str)    True    &gt;&gt;&gt; isinstance(u&#39;中文&#39;,unicode)    False</code></pre><h4 id="IDE和控制台"><a href="#IDE和控制台" class="headerlink" title="IDE和控制台"></a>IDE和控制台</h4><pre><code class="hljs">    &gt;&gt;&gt; print u&#39;中文&#39;.encode(&#39;gbk&#39;)    &gt;&gt;&gt; print u&#39;中文&#39;.encode(&#39;utf-8&#39;)</code></pre><p>IDE和控制台报错，原因是print时，编码和IDE自身编码不一致，输出时将编码转换成一致的就可以了。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://wklken.me/posts/2013/08/31/python-extra-coding-intro.html">PYTHON-进阶-编码处理小结</a></p><p><a href="https://www.zybuluo.com/zwenqiang/note/21851">Python2中的编码错误</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python里的编码与解码</title>
    <link href="/2018/03/07/2018-03-07-Python%E9%87%8C%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/"/>
    <url>/2018/03/07/2018-03-07-Python%E9%87%8C%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xe5 in position 4: ordinal not in range</code></pre><p>Python 默认脚本文件都是 UTF-8 编码的，当文件中有非 UTF-8 编码范围内的字符的时候就要使用”编码指示”来修正. 关于 sys.defaultencoding，这个在解码没有明确指明解码方式的时候使用。</p><span id="more"></span><p>例如有下列代码</p><pre><code class="hljs">#! /usr/bin/env python       # -*- coding: utf-8 -*-       s = &#39;中文&#39;  # 注意这里的 str 是 str 类型的，而不是 unicode       s.encode(&#39;gb18030&#39;)    </code></pre><p>这句代码将 s 重新编码为 gb18030的格式，即进行unicode -&gt; str的转换。因为 s 本身就是 str类型的，因此 Python 会自动的先将 s 解码为 unicode ，然后再编码成 gb18030。因为解码是python自动进行的，我们没有指明解码方式，python 就会使用 sys.defaultencoding指明的方式来解码。很多情况下 sys.defaultencoding 是 ANSCII，如果 s 不是这个类型就会出错。</p><p>以下有两个解决方法：</p><p>第一种,是明确的指示出 s 的编码方式</p><pre><code class="hljs">    #! /usr/bin/env python     # -*- coding: utf-8 -*-     s = &#39;中文&#39;     s.decode(&#39;utf-8&#39;).encode(&#39;gb18030&#39;) </code></pre><p>第二种,更改sys.defaultencoding为文件的编码方式</p><pre><code class="hljs">    #! /usr/bin/env python     # -*- coding: utf-8 -*-     import sys #要重新载入sys。因为 Python 初始化后会删除 sys.setdefaultencoding 这个方 法    reload(sys)     sys.setdefaultencoding(&#39;utf-8&#39;)</code></pre><h2 id="Math-Domain-Error"><a href="#Math-Domain-Error" class="headerlink" title="Math Domain Error"></a>Math Domain Error</h2><p>出现错误：</p><pre><code class="hljs">    ValueError:math domain error</code></pre><p>错误原因：<br>某些操作不符合数学定义，如对负数取对数，对负数开平方。<br>例如，x1 &#x3D; math.log(0)；或者，x1 &#x3D; math.sqrt(-1)。</p><h2 id="Python字典"><a href="#Python字典" class="headerlink" title="Python字典"></a>Python字典</h2><p>在Python中，字典是一种可变容器模型，且可存储任意类型对象。<br>字典的每个键值 key&#x3D;&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 ,格式如下所示：</p><pre><code class="hljs">    d = &#123;key1 : value1, key2 : value2 &#125;</code></pre><p>键必须是唯一的，但值则不必。<br>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。<br>一个简单的字典实例：</p><pre><code class="hljs">    dict = &#123;&#39;Alice&#39;: &#39;2341&#39;, &#39;Beth&#39;: &#39;9102&#39;, &#39;Cecil&#39;: &#39;3258&#39;&#125;</code></pre><p>也可如此创建字典：</p><pre><code class="hljs">    dict1 = &#123; &#39;abc&#39;: 456 &#125;;    dict2 = &#123; &#39;abc&#39;: 123, 98.6: 37 &#125;;</code></pre><h3 id="访问字典里的值"><a href="#访问字典里的值" class="headerlink" title="访问字典里的值"></a>访问字典里的值</h3><p>把相应的键放入熟悉的方括弧，如下实例:<br>实例</p><pre><code class="hljs">    #!/usr/bin/python    dict = &#123;&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125;;    print &quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;];    print &quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;];</code></pre><p>以上实例输出结果：</p><pre><code class="hljs">    dict[&#39;Name&#39;]:  Zara    dict[&#39;Age&#39;]:  7</code></pre><p>如果用字典里没有的键访问数据，会输出错误如下：<br>实例</p><pre><code class="hljs">    #!/usr/bin/python    dict = &#123;&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125;;    print &quot;dict[&#39;Alice&#39;]: &quot;, dict[&#39;Alice&#39;];</code></pre><p>以上实例输出结果：</p><pre><code class="hljs">    dict[&#39;Alice&#39;]:     Traceback (most recent call last):      File &quot;test.py&quot;, line 5, in &lt;module&gt;print &quot;dict[&#39;Alice&#39;]: &quot;, dict[&#39;Alice&#39;];    KeyError: &#39;Alice&#39;</code></pre><h3 id="字典键的特性"><a href="#字典键的特性" class="headerlink" title="字典键的特性"></a>字典键的特性</h3><p>字典值可以没有限制地取任何python对象，既可以是标准的对象，也可以是用户定义的，但键不行。<br>两个重要的点需要记住：<br>1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例：<br>实例</p><pre><code class="hljs">    #!/usr/bin/python    dict = &#123;&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;Manni&#39;&#125;;    print &quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;];</code></pre><p>以上实例输出结果：</p><pre><code class="hljs">    dict[&#39;Name&#39;]:  Manni</code></pre><p>2）键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行，如下实例：<br>实例</p><pre><code class="hljs">    #!/usr/bin/python    dict = &#123;[&#39;Name&#39;]: &#39;Zara&#39;, &#39;Age&#39;: 7&#125;;    print &quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;];</code></pre><p>以上实例输出结果：</p><pre><code class="hljs">    Traceback (most recent call last):      File &quot;test.py&quot;, line 3, in &lt;module&gt;        dict = &#123;[&#39;Name&#39;]: &#39;Zara&#39;, &#39;Age&#39;: 7&#125;;    TypeError: list objects are unhashable</code></pre><h2 id="Python格式对齐"><a href="#Python格式对齐" class="headerlink" title="Python格式对齐"></a>Python格式对齐</h2><p>报错：</p><pre><code class="hljs">    IndentationError: unindent does not match any outer indentation level</code></pre><p>原因及解决方法：<br>    Python语法，是不支持的代码对齐中，混用TAB和空格的。所以出现上述错误提示了。<br>    去把对应的TAB，都改为空格，统一一下对齐的风格，即可。</p><h2 id="strip-方法"><a href="#strip-方法" class="headerlink" title=".strip()方法"></a>.strip()方法</h2><p>strip()方法语法：</p><pre><code class="hljs">    str.strip([chars]);</code></pre><p>chars - 移除字符串头尾指定的字符。</p><p>实例：</p><pre><code class="hljs">    #!/usr/bin/python    # -*- coding: UTF-8 -*-     str = &quot;0000000     Runoob  0000000&quot;;     print str.strip( &#39;0&#39; );  # 去除首尾字符 0    str2 = &quot;   Runoob      &quot;;   # 去除首尾空格    print str2.strip();</code></pre><p>输出为：</p><pre><code class="hljs">                Runoob      Runoob</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>一日一记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中文编码及Tkinter库</title>
    <link href="/2018/03/05/2018-03-05-Python%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E5%8F%8ATkinter%E5%BA%93/"/>
    <url>/2018/03/05/2018-03-05-Python%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E5%8F%8ATkinter%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Python编码问题"><a href="#Python编码问题" class="headerlink" title="Python编码问题"></a>Python编码问题</h1><pre><code class="hljs">SyntaxError: Non-ASCII character &#39;\xe5&#39; in file ABC.py on line 24, but no encoding declared; see http://python.org/dev/peps/pep-         0263/   for details</code></pre><span id="more"></span><h3 id="出错原因："><a href="#出错原因：" class="headerlink" title="出错原因："></a>出错原因：</h3><p>Python默认是以ASCII作为编码方式的，如果在自己的Python源码中包含了中文（或者其他非英语系的语言），则会出现编码错误。</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>在文件开头加入下面代码</p><pre><code class="hljs"># -*- coding: UTF-8 -*- </code></pre><p>默认的python文件是采用ascii编码的，在头部加入# -<em>- coding: utf-8 -</em>-   则指定文件的编码格式是utf-8，那么就是说文件内你可以用中文或其他的文字了。</p><h1 id="Tkinter库引用问题"><a href="#Tkinter库引用问题" class="headerlink" title="Tkinter库引用问题"></a>Tkinter库引用问题</h1><!--more--><p>Tkinter是python内置的GUI图形库，支持多个操作系统，使用Tcl语言开发；</p><p>我们编写的Python代码会调用内置的Tkinter，Tkinter封装了访问Tk的接口；</p><p>Tk会调用操作系统提供的本地GUI接口，完成最终的GUI</p><p>Tkinter 是 Python 的标准 GUI 库。Python 使用 Tkinter 可以快速的创建 GUI 应用程序。<br>由于 Tkinter 是内置到 python 的安装包中、只要安装好 Python 之后就能 import Tkinter 库、而且 IDLE 也是用 Tkinter 编写而成、对于简单的图形界面 Tkinter 还是能应付自如。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>Python3.x 版本使用的库名为 tkinter,即首写字母 T 为小写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tkinter<br></code></pre></td></tr></table></figure><p>即在Python2.x版本中，使用Tkinter；在Python3.x版本中，使用tkinter.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Tkinter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PGU库的安装</title>
    <link href="/2018/01/29/2018-01-29-PGU%E5%BA%93%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2018/01/29/2018-01-29-PGU%E5%BA%93%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>今天在试跑代码的时候，需要用到python里面的一个库PGU，</p><span id="more"></span><p>但是用pip install命令安装的时候，出现报错</p><pre><code class="hljs">Could not find a version that satisfies the requirement PGU (from version: )No matching distribution found for PGU.</code></pre><p>开始想过会不会是Python2.7不支持PGU库，最后直接从Google Code中下载到了安装包，安装包中有setup.py文件，执行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> setup.<span class="hljs-keyword">py</span> install<br></code></pre></td></tr></table></figure><p>即可成功安装，安装之后测试成功。</p><p>Google的下载地址为 <a href="https://code.google.com/archive/p/pgu/downloads">https://code.google.com/archive/p/pgu/downloads</a> ，最新版已经更新至0.18</p><p>PGU全称为Phil’s Pygame Utilities，它包含的功能有GUI，html渲染（可嵌入html代码），文档输出，文本渲染等，可以用来画一些窗口。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
